# Generated by Django 5.2.4 on 2025-07-11 03:24

import datetime
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceCatalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('icon', models.TextField(blank=True, null=True)),
                ('avg_kwh', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('procel_seal', models.CharField(choices=[('A', 'A - Mais Eficiente'), ('B', 'B - Eficiente'), ('C', 'C - Média Eficiência'), ('D', 'D - Baixa Eficiência'), ('E', 'E - Menos Eficiente'), ('NA', 'Não se Aplica/Não Informado')], default='NA', max_length=5, verbose_name='Selo Procel')),
                ('categoria', models.CharField(blank=True, choices=[('ELETRODOMESTICO', 'Eletrodoméstico'), ('ILUMINACAO', 'Iluminação'), ('ELETRONICOS', 'Eletrônicos'), ('CLIMATIZACAO', 'Climatização'), ('AQUECIMENTO', 'Aquecimento de Água'), ('OUTROS', 'Outros')], max_length=100, null=True, verbose_name='Categoria')),
                ('potencia_nominal', models.CharField(blank=True, choices=[('60', '60 Watts'), ('100', '100 Watts'), ('150', '150 Watts'), ('500', '500 Watts'), ('1000', '1000 Watts'), ('1500', '1500 Watts'), ('2000', '2000 Watts'), ('2500', '2500 Watts'), ('3000', '3000 Watts'), ('3500', '3500 Watts'), ('4000', '4000 Watts'), ('5000', '5000 Watts'), ('OUTRO', 'Outra Potência')], max_length=10, null=True, verbose_name='Potência Nominal (Watts)')),
                ('tensao', models.CharField(blank=True, choices=[('127', '127 Volts (110V/127V)'), ('220', '220 Volts'), ('BIVOLT', 'Bivolt (127V/220V)'), ('OUTRO', 'Outra Tensão')], max_length=10, null=True, verbose_name='Tensão (Volts)')),
                ('marca', models.CharField(blank=True, choices=[('SAMSUNG', 'Samsung'), ('LG', 'LG'), ('PHILIPS', 'Philips'), ('BRASTEMP', 'Brastemp'), ('ELETROLUX', 'Electrolux'), ('GE', 'GE'), ('PANASONIC', 'Panasonic'), ('MIDEA', 'Midea'), ('DAIKIN', 'Daikin'), ('CONSUL', 'Consul'), ('OUTRA', 'Outra Marca')], max_length=100, null=True, verbose_name='Marca')),
            ],
            options={
                'verbose_name': 'Device Catalog Entry',
                'verbose_name_plural': 'Device Catalog',
                'db_table': 'device_catalog',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EnergyTariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('tariff_type', models.CharField(choices=[('CONVENCIONAL', 'Convencional'), ('COMERCIAL', 'Comercial'), ('INDUSTRIAL', 'Industrial'), ('BRANCA', 'Branca'), ('AZUL', 'Azul'), ('VERDE', 'Verde'), ('RURAL', 'Rural (Tarifa específica)')], default='CONVENCIONAL', max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('cost_per_kwh', models.DecimalField(blank=True, decimal_places=4, help_text='Custo único por kWh (para tarifas convencionais) (R$/kWh).', max_digits=10, null=True)),
                ('peak_energy_price', models.DecimalField(blank=True, decimal_places=4, help_text='Preço da energia na ponta (R$/kWh) - para tarifas horosazonais.', max_digits=10, null=True)),
                ('intermediate_energy_price', models.DecimalField(blank=True, decimal_places=4, help_text='Preço da energia no período intermediário (Tarifa Branca) (R$/kWh).', max_digits=10, null=True)),
                ('off_peak_energy_price', models.DecimalField(blank=True, decimal_places=4, help_text='Preço da energia fora de ponta (R$/kWh) - para tarifas horosazonais.', max_digits=10, null=True)),
                ('peak_demand_charge', models.DecimalField(blank=True, decimal_places=4, help_text='Custo da demanda na ponta (R$/kW).', max_digits=10, null=True)),
                ('off_peak_demand_charge', models.DecimalField(blank=True, decimal_places=4, help_text='Custo da demanda fora de ponta (R$/kW).', max_digits=10, null=True)),
                ('peak_demand_overflow_charge', models.DecimalField(blank=True, decimal_places=5, help_text='Custo por kW de ultrapassagem da demanda na Ponta (R$/kW).', max_digits=10, null=True)),
                ('off_peak_demand_overflow_charge', models.DecimalField(blank=True, decimal_places=5, help_text='Custo por kW de ultrapassagem da demanda Fora de Ponta (R$/kW).', max_digits=10, null=True)),
                ('has_tiered_pricing', models.BooleanField(default=False, help_text='Indica se esta tarifa utiliza precificação por faixas de consumo.')),
                ('availability_cost_kwh_franchise', models.IntegerField(blank=True, help_text='Franquia mínima de consumo em kWh para custo de disponibilidade (Grupo B).', null=True)),
                ('tax_icms_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota ICMS (%) para esta tarifa.', max_digits=5, null=True)),
                ('pis_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota PIS (%) para esta tarifa.', max_digits=5, null=True)),
                ('cofins_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota COFINS (%) para esta tarifa.', max_digits=5, null=True)),
            ],
            options={
                'verbose_name': 'Energy Tariff',
                'verbose_name_plural': 'Energy Tariffs',
                'db_table': 'energy_tariffs',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='preferences', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('theme_preference', models.CharField(choices=[('light', 'Claro'), ('dark', 'Escuro')], default='light', max_length=10)),
                ('notification_frequency', models.CharField(choices=[('daily', 'Diário'), ('weekly', 'Semanal'), ('monthly', 'Mensal'), ('never', 'Nunca')], default='daily', max_length=10)),
                ('report_format_preference', models.CharField(choices=[('pdf', 'PDF'), ('csv', 'CSV'), ('excel', 'Excel')], default='pdf', max_length=10)),
                ('receive_marketing_emails', models.BooleanField(default=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Número de telefone para notificações via SMS (formato: +55 11 912345678).', max_length=128, null=True, region=None, verbose_name='Número de Telefone')),
                ('receive_sms_notifications', models.BooleanField(default=False, verbose_name='Receber notificações por SMS')),
                ('receive_push_notifications', models.BooleanField(default=True, verbose_name='Receber notificações push no navegador')),
            ],
            options={
                'verbose_name': 'User Preference',
                'verbose_name_plural': 'User Preferences',
                'db_table': 'user_preferences',
            },
        ),
        migrations.CreateModel(
            name='EnergyProfiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], default='PF', help_text='Classificação do cliente (Pessoa Física ou Jurídica)', max_length=5)),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('api_key', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Chave de API do Sensor')),
                ('subgroup', models.CharField(choices=[('A1', 'Subgrupo A1'), ('A2', 'Subgrupo A2'), ('A3', 'Subgrupo A3'), ('A3A', 'Subgrupo A3A'), ('A4', 'Subgrupo A4'), ('AS', 'Subgrupo AS'), ('B1', 'Subgrupo B1 - Residencial'), ('B2', 'Subgrupo B2 - Rural'), ('B3', 'Subgrupo B3 - Comercial, Serviços e Outras Atividades'), ('B4', 'Subgrupo B4 - Iluminação Pública')], default='B1', help_text='Subgrupo de enquadramento (e.g., B1 - Residencial)', max_length=10)),
                ('voltage_group', models.CharField(blank=True, help_text='Ex: b', max_length=50, null=True)),
                ('supply_type', models.CharField(choices=[('MONOFASICO', 'Monofásico'), ('BIFASICO', 'Bifásico'), ('TRIFASICO', 'Trifásico')], default='MONOFASICO', help_text='Tipo de fornecimento (Monofásico, Bifásico, Trifásico)', max_length=15)),
                ('tariff_type', models.CharField(choices=[('CONVENCIONAL', 'Convencional'), ('BRANCA', 'Branca'), ('AZUL', 'Horo-Sazonal Azul'), ('VERDE', 'Horo-Sazonal Verde')], default='CONVENCIONAL', help_text='Classificação tarifária (e.g., Residencial, Comercial)', max_length=20)),
                ('nominal_voltage', models.CharField(blank=True, choices=[('220 V - MO', '220 V - Monofásico'), ('127 V - MO', '127 V - Monofásico'), ('380 V - TF', '380 V - Trifásico'), ('240 V - DF', '240 V - Bifásico'), ('440 V - TF', '440 V - Trifásico')], default='220 V - MO', help_text='Ex: 220 V - MO', max_length=50)),
                ('classification', models.CharField(blank=True, choices=[('Residencial Pleno', 'Residencial'), ('Comercial B.T.', 'Comercial'), ('Industrial B.T.', 'Industrial'), ('Rural', 'Rural'), ('Poder Público B.T.', 'Poder Público'), ('Iluminação Pública', 'Iluminação Pública'), ('Serviço Público B.T.', 'Serviço Público'), ('Residencial Baixa Renda', 'Baixa Renda')], default='Residencial Pleno', help_text='Ex: Residencial Pleno', max_length=100)),
                ('subclass', models.CharField(blank=True, choices=[('Residencial Normal', 'Residencial Normal'), ('Residencial Baixa Renda', 'Residencial Baixa Renda')], help_text='Ex: Residencial Normal', max_length=100, null=True)),
                ('address_line1', models.CharField(max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='energy_profiles', to=settings.AUTH_USER_MODEL)),
                ('default_tariff', models.ForeignKey(blank=True, help_text='Tarifa padrão associada a este perfil.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles_with_default_tariff', to='pages.energytariff')),
            ],
            options={
                'verbose_name': 'Energy Profile',
                'verbose_name_plural': 'Energy Profiles',
                'db_table': 'energy_profiles',
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ConsumptionGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('goal_type', models.CharField(choices=[('kwh_reduction_percent', 'Redução % de kWh'), ('kwh_absolute', 'Meta Absoluta de kWh'), ('cost_target', 'Meta de Custo')], default='kwh_absolute', max_length=50)),
                ('target_value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('target_kwh', models.DecimalField(decimal_places=4, help_text='Meta de consumo em kWh.', max_digits=10, null=True)),
                ('target_kwh_per_month', models.DecimalField(decimal_places=2, help_text='Meta de consumo de energia em kWh por mês.', max_digits=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.TextField(blank=True, help_text='Descrição da meta.', null=True)),
                ('alert_threshold_percentage', models.DecimalField(decimal_places=2, default=Decimal('90.00'), help_text='Percentual da meta que, ao ser atingido, dispara um alerta.', max_digits=5)),
                ('is_active', models.BooleanField(default=True, help_text='Indica se esta meta de consumo está atualmente ativa.')),
                ('achieved_date', models.DateField(blank=True, null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='consumption_goals', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Consumption Goal',
                'verbose_name_plural': 'Consumption Goals',
                'db_table': 'consumption_goals',
                'ordering': ['profile', '-start_date'],
                'unique_together': {('profile', 'name', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='BillingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bill_type', models.CharField(choices=[('BT_CONV', 'Baixa Tensão Convencional (Grupo B)'), ('TB', 'Tarifa Branca (Grupo B)'), ('MICRO_REGIAO', 'Micro Região (Grupo B)'), ('AT_AZUL', 'Alta Tensão Azul (Grupo A)'), ('AT_VERDE', 'Alta Tensão Verde (Grupo A)')], help_text='Tipo de fatura (ex: Convencional, Tarifa Branca, Alta Tensão)', max_length=20)),
                ('bill_number', models.CharField(help_text='Número único da fatura.', max_length=50, unique=True)),
                ('invoice_date', models.DateField(help_text='Data de emissão da fatura.')),
                ('due_date', models.DateField(help_text='Data de vencimento da fatura.')),
                ('start_period', models.DateField(help_text='Data de início do período de consumo faturado')),
                ('end_period', models.DateField(help_text='Data de fim do período de consumo faturado')),
                ('energy_charge_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor total da energia consumida (R$).', max_digits=10)),
                ('demand_charge_total', models.DecimalField(blank=True, decimal_places=2, help_text='Valor total da demanda faturada (R$).', max_digits=10, null=True)),
                ('contracted_demand_peak_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda contratada na ponta (kW).', max_digits=10, null=True)),
                ('contracted_demand_off_peak_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda contratada fora de ponta (kW).', max_digits=10, null=True)),
                ('billed_demand_peak_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda faturada na ponta (kW).', max_digits=10, null=True)),
                ('billed_demand_off_peak_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda faturada fora de ponta (kW).', max_digits=10, null=True)),
                ('availability_cost_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valor do custo de disponibilidade (R$).', max_digits=10, null=True)),
                ('days_billed', models.IntegerField(blank=True, help_text='Número de dias faturados', null=True)),
                ('kwh_total_billed', models.DecimalField(decimal_places=4, help_text='Consumo total em kWh faturado', max_digits=10)),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Custo do valor total da fatura (R$)', max_digits=10)),
                ('unit_price_kwh', models.DecimalField(blank=True, decimal_places=6, help_text='Preço unitário do kWh (com impostos) R$/kWh', max_digits=8, null=True)),
                ('tariff_unit_kwh', models.DecimalField(blank=True, decimal_places=6, help_text='Tarifa unitária do kWh (sem impostos) R$/kWh', max_digits=8, null=True)),
                ('applied_tariff_flag', models.CharField(blank=True, choices=[('VERDE', 'Verde'), ('AMARELA', 'Amarela'), ('VERMELHA1', 'Vermelha Nível 1'), ('VERMELHA2', 'Vermelha Nível 2')], help_text='Bandeira tarifária aplicada a esta fatura (ex: VERDE, AMARELA).', max_length=20, null=True)),
                ('applied_tariff_flag_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Custo da bandeira tarifária aplicada (R$).', max_digits=10, null=True)),
                ('flag_additional_cost_per_100kwh', models.DecimalField(blank=True, decimal_places=4, help_text='Adicional da Bandeira Tarifária em R$ por 100 kWh', max_digits=8, null=True)),
                ('meter_id', models.CharField(blank=True, help_text='Número de identificação do medidor na fatura.', max_length=100, null=True)),
                ('previous_reading', models.DecimalField(blank=True, decimal_places=3, help_text='Leitura anterior do medidor na fatura.', max_digits=10, null=True)),
                ('current_reading', models.DecimalField(blank=True, decimal_places=3, help_text='Leitura atual do medidor na fatura.', max_digits=10, null=True)),
                ('meter_constant', models.DecimalField(decimal_places=3, default=Decimal('1.0'), help_text='Constante do medidor (geralmente 1.0).', max_digits=8)),
                ('next_reading_date', models.DateField(blank=True, help_text='Data da próxima leitura prevista na fatura.', null=True)),
                ('icms_base', models.DecimalField(blank=True, decimal_places=2, help_text='Base de cálculo do ICMS (R$).', max_digits=10, null=True)),
                ('icms_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota do ICMS (%) na fatura. (Ajustado para 4 casas)', max_digits=5, null=True)),
                ('icms_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valor do ICMS (R$) na fatura.', max_digits=10, null=True)),
                ('pis_base', models.DecimalField(blank=True, decimal_places=2, help_text='Base de cálculo do PIS (R$).', max_digits=10, null=True)),
                ('pis_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota do PIS (%). (Ajustado para 4 casas)', max_digits=5, null=True)),
                ('pis_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valor do PIS (R$) na fatura.', max_digits=10, null=True)),
                ('cofins_base', models.DecimalField(blank=True, decimal_places=2, help_text='Base de cálculo do COFINS (R$).', max_digits=10, null=True)),
                ('cofins_aliquot', models.DecimalField(blank=True, decimal_places=4, help_text='Alíquota do COFINS (%). (Ajustado para 4 casas)', max_digits=5, null=True)),
                ('cofins_value', models.DecimalField(blank=True, decimal_places=2, help_text='Valor do COFINS (R$) na fatura.', max_digits=10, null=True)),
                ('cip_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Custo da Contribuição de Iluminação Pública (CIP) (R$).', max_digits=10)),
                ('meter_rental_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Custo de aluguel do medidor (R$).', max_digits=10, null=True)),
                ('fine_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor de Multa (R$).', max_digits=10)),
                ('monetary_correction_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor de Correção Monetária (R$).', max_digits=10)),
                ('interest_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Valor de Juros (R$).', max_digits=10)),
                ('notes', models.TextField(blank=True, help_text='Observações adicionais sobre a fatura', null=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='billing_records', to='pages.energyprofiles')),
                ('energy_tariff_used', models.ForeignKey(blank=True, help_text='Tarifa base utilizada para esta fatura.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billed_records', to='pages.energytariff')),
            ],
            options={
                'verbose_name': 'Billing Record',
                'verbose_name_plural': 'Billing Records',
                'db_table': 'billing_records',
                'ordering': ['-invoice_date'],
                'unique_together': {('profile', 'invoice_date')},
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('alert_type', models.CharField(choices=[('high_consumption', 'Consumo Elevado'), ('goal_exceeded', 'Meta Excedida'), ('outliers_detected', 'Anomalia Detectada'), ('model_accuracy_low', 'Acurácia do Modelo Baixa'), ('system_error', 'Erro do Sistema'), ('information', 'Informação'), ('CONSUMPTION_EXCEEDED', 'Consumo Excedido'), ('GOAL_THRESHOLD_REACHED', 'Limite de Meta Atingido'), ('BILL_OVERDUE', 'Fatura Vencida'), ('PREDICTION_DEVIATION', 'Desvio de Previsão'), ('QUALITY_ISSUE', 'Problema de Qualidade de Energia')], default='information', max_length=50)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False, help_text='Indica se o alerta foi lido.')),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('current_value', models.DecimalField(blank=True, decimal_places=4, help_text='Valor atual que causou o alerta.', max_digits=12, null=True)),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('alert_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='Data e Hora do Alerta')),
                ('suggested_actions', models.TextField(blank=True, help_text='Medidas que podem ser tomadas para resolver ou mitigar o alerta.', null=True, verbose_name='Ações Sugeridas')),
                ('severity', models.IntegerField(choices=[(1, 'Baixa'), (2, 'Média'), (3, 'Alta'), (4, 'Crítica')], default=2, help_text='Nível de gravidade do alerta.', verbose_name='Severidade do Alerta')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
                ('related_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', to='pages.consumptiongoal')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='alerts', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'db_table': 'alerts',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.CreateModel(
            name='OptimizationSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('estimated_savings_kwh', models.DecimalField(blank=True, decimal_places=4, help_text='Economia estimada em kWh (se aplicável).', max_digits=10, null=True)),
                ('estimated_savings_kwh_per_month', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('estimated_savings_money', models.DecimalField(blank=True, decimal_places=2, help_text='Economia estimada em dinheiro (R$) (se aplicável).', max_digits=10, null=True)),
                ('is_implemented', models.BooleanField(default=False, help_text='Indica se a sugestão foi implementada.')),
                ('suggested_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que a sugestão foi gerada.')),
                ('category', models.CharField(choices=[('appliances', 'Eletrodomésticos'), ('EQUIPAMENTOS', 'Equipamentos'), ('ILUMINACAO', 'Iluminação'), ('heating_cooling', 'Aquecimento e Refrigeração'), ('COMPORTAMENTO', 'Comportamento'), ('insulation', 'Isolamento'), ('MANUTENCAO', 'Manutenção'), ('GERACAO_PROPRIA', 'Geração Própria'), ('other', 'Outro')], default='appliances', max_length=50)),
                ('procel_seal_target', models.CharField(blank=True, help_text='Selo Procel visado para esta sugestão (Ex: A)', max_length=10, null=True)),
                ('impact_level', models.CharField(choices=[('low', 'Baixo'), ('medium', 'Médio'), ('high', 'Alto')], max_length=10)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='optimization_suggestions', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Optimization Suggestion',
                'verbose_name_plural': 'Optimization Suggestions',
                'db_table': 'optimization_suggestions',
                'ordering': ['-suggested_at', 'profile__name'],
            },
        ),
        migrations.CreateModel(
            name='PredictionModels',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('model_type', models.CharField(choices=[('UPLOAD', 'Arquivo Externo (Upload)'), ('LINEAR', 'Regressão Linear Simples (Automático)'), ('PROPHET', 'Prophet (Automático)'), ('RF_REG', 'Florestas Aleatórias (Regressão)'), ('TF_REG', 'Rede Neural - Keras/TensorFlow (Regressão)'), ('LOGISTIC', 'Regressão Logística (Classificação)'), ('DT_CLASS', 'Árvore de Decisão (Classificação)'), ('KMEANS', 'K-Means (Clusterização)'), ('GMM', 'Misturas de Gaussianas (Clusterização)'), ('APRIORI', 'Apriori (Regras de Associação)'), ('BAYESIAN', 'Inferência Bayesiana'), ('KNN', 'K-Vizinhos Mais Próximos (K-NN)')], default='LINEAR', max_length=10, verbose_name='Tipo de Modelo')),
                ('model_file', models.FileField(blank=True, null=True, upload_to='prediction_models/')),
                ('is_active', models.BooleanField(default=True)),
                ('accuracy_score', models.DecimalField(blank=True, decimal_places=2, help_text='Última pontuação de acurácia registrada para este modelo (ex: MAPE).', max_digits=5, null=True)),
                ('data_source', models.CharField(choices=[('readings', 'Leituras de Energia (EnergyReading)'), ('billing', 'Faturas (BillingRecord)'), ('devices', 'Consumo Agregado de Dispositivos'), ('predictions', 'Previsões Anteriores (Feedback Loop)'), ('quality', 'Registros de Qualidade de Energia'), ('goals', 'Metas de Consumo'), ('alerts', 'Histórico de Alertas de Consumo'), ('weather', 'Dados Climáticos (Ex: Temperatura)'), ('solar', 'Geração Solar (se aplicável)'), ('occupancy', 'Dados de Ocupação (Comercial)'), ('events', 'Calendário de Eventos Especiais'), ('simulation', 'Dados de Simulação')], default='readings', max_length=20, verbose_name='Fonte de Dados para Treinamento')),
                ('default_forecast_horizon', models.IntegerField(default=30, verbose_name='Horizonte de Previsão Padrão (dias)')),
                ('yearly_seasonality', models.BooleanField(default=True, verbose_name='Sazonalidade Anual (Prophet)')),
                ('weekly_seasonality', models.BooleanField(default=True, verbose_name='Sazonalidade Semanal (Prophet)')),
                ('daily_seasonality', models.BooleanField(default=False, verbose_name='Sazonalidade Diária (Prophet)')),
                ('seasonality_mode', models.CharField(choices=[('additive', 'Aditiva'), ('multiplicative', 'Multiplicativa')], default='multiplicative', max_length=15, verbose_name='Modo de Sazonalidade (Prophet)')),
                ('include_brazil_holidays', models.BooleanField(default=True, verbose_name='Incluir Feriados Nacionais (Prophet)')),
                ('last_trained', models.DateTimeField(blank=True, help_text='Data e hora do último treinamento do modelo.', null=True)),
                ('last_accuracy_score', models.JSONField(blank=True, null=True, verbose_name='Últimas Métricas de Acurácia (JSON)')),
                ('additional_params', models.JSONField(blank=True, help_text="Para configurações avançadas, ex: {'changepoint_prior_scale': 0.05}", null=True, verbose_name='Parâmetros Adicionais (JSON)')),
            ],
            options={
                'verbose_name': 'Prediction Model',
                'verbose_name_plural': 'Prediction Models',
                'db_table': 'prediction_models',
                'ordering': ['name'],
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='ProfileDevices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, default=1, verbose_name='Quantidade')),
                ('hours_per_day', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Uso Médio Diário (horas)')),
                ('days_of_week', models.CharField(blank=True, help_text='Dias da semana em que o dispositivo é usado (ex: MON,QUA,SEX)', max_length=50, null=True, verbose_name='Dias da Semana de Uso')),
                ('tempo_uso_semanal', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Tempo de Uso Semanal (horas)')),
                ('daily_kwh_consumption', models.DecimalField(blank=True, decimal_places=4, help_text='Consumo diário estimado em kWh para este dispositivo no perfil.', max_digits=10, null=True)),
                ('monthly_kwh_consumption', models.DecimalField(blank=True, decimal_places=4, help_text='Consumo mensal estimado em kWh para este dispositivo no perfil.', max_digits=10, null=True)),
                ('annual_kwh_consumption', models.DecimalField(blank=True, decimal_places=4, help_text='Consumo anual estimado em kwh para este dispositivo no perfil.', max_digits=10, null=True)),
                ('consumption_kwh_per_day', models.DecimalField(blank=True, decimal_places=4, help_text='Consumo diário calculado (kWh/dia) para este dispositivo no perfil', max_digits=10, null=True)),
                ('vida_util_estimativa', models.IntegerField(blank=True, null=True, verbose_name='Vida Útil Estimada (anos)')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='profile_devices', to='pages.devicecatalog')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='profile_devices', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Profile Device',
                'verbose_name_plural': 'Profile Devices',
                'db_table': 'profile_devices',
                'ordering': ['profile', 'device'],
            },
        ),
        migrations.CreateModel(
            name='ConsumptionPredictions',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('prediction_date', models.DateField()),
                ('predicted_kwh', models.DecimalField(decimal_places=4, help_text='Consumo previsto em kWh.', max_digits=10, null=True)),
                ('predicted_daily_kwh', models.DecimalField(decimal_places=4, max_digits=8)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Pontuação de confiança da previsão (0.00-1.00).', max_digits=5, null=True)),
                ('is_final', models.BooleanField(default=False, help_text='Indica se esta é a previsão final para a data ou um rascunho.')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='consumption_predictions', to='pages.energyprofiles')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='consumption_predictions', to='pages.predictionmodels')),
                ('profile_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumption_predictions', to='pages.profiledevices')),
            ],
            options={
                'verbose_name': 'Consumption Prediction',
                'verbose_name_plural': 'Consumption Predictions',
                'db_table': 'consumption_predictions',
                'ordering': ['prediction_date', 'profile_device'],
                'unique_together': {('profile', 'prediction_date')},
            },
        ),
        migrations.CreateModel(
            name='PushNotificationSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('endpoint', models.URLField(max_length=512, unique=True)),
                ('p256dh', models.CharField(max_length=255)),
                ('auth', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Push Notification Subscription',
                'verbose_name_plural': 'Push Notification Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='TariffFlagAdditive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_type', models.CharField(choices=[('green', 'Verde'), ('yellow', 'Amarela'), ('red1', 'Vermelha - Patamar 1'), ('red2', 'Vermelha - Patamar 2'), ('water_scarcity', 'Escassez Hídrica')], max_length=20, unique=True)),
                ('additional_cost_per_100kwh', models.DecimalField(decimal_places=4, help_text='Adicional em R$ por 100 kWh', max_digits=8)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Tariff Flag Additive',
                'verbose_name_plural': 'Tariff Flag Additives',
                'db_table': 'tariff_flag_additives',
                'ordering': ['-start_date', 'flag_type'],
                'unique_together': {('flag_type', 'start_date', 'end_date')},
            },
        ),
        migrations.CreateModel(
            name='EnergyQualityRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('record_datetime', models.DateTimeField(help_text='Data do registro de qualidade de energia')),
                ('record_type', models.CharField(choices=[('INTERRUPTION', 'Interrupção de Energia'), ('VOLTAGE_FLUCTUATION', 'Flutuação de Tensão'), ('OUTAGE', 'Queda de Energia (Blackout)')], help_text='Tipo de registro de qualidade de energia.', max_length=100)),
                ('total_duration_interruptions_hours', models.DecimalField(decimal_places=2, default=0.0, help_text='Duração total das interrupções no mês em horas (ex: 0.5 para 30 min).', max_digits=5)),
                ('voltage_level', models.DecimalField(blank=True, decimal_places=2, help_text='Nível de tensão medido durante o evento (V) (se aplicável).', max_digits=6, null=True)),
                ('num_voltage_fluctuations', models.IntegerField(default=0, help_text='Número de flutuações de tensão (Ex: quedas ou picos)')),
                ('avg_voltage_variation', models.DecimalField(blank=True, decimal_places=2, help_text='Variação média da tensão (%)', max_digits=5, null=True)),
                ('thd_voltage', models.DecimalField(blank=True, decimal_places=2, help_text='Distorção Harmônica Total de Tensão (THD-V %)', max_digits=5, null=True)),
                ('thd_current', models.DecimalField(blank=True, decimal_places=2, help_text='Distorção Harmônica Total de Corrente (THD-I %)', max_digits=5, null=True)),
                ('num_interruptions', models.IntegerField(default=0, help_text='Número de interrupções individuais no mês.')),
                ('tariff_flag_applied', models.CharField(blank=True, choices=[('VERDE', 'Verde'), ('AMARELA', 'Amarela'), ('VERMELHA1', 'Vermelha Nível 1'), ('VERMELHA2', 'Vermelha Nível 2')], help_text='Bandeira tarifária aplicada no mês de referência (ex: Verde, Amarela).', max_length=20, null=True)),
                ('notes', models.TextField(blank=True, help_text='Observações adicionais sobre a qualidade do serviço no período.', null=True)),
                ('profile', models.ForeignKey(help_text='Perfil de energia ao qual este registro de qualidade se refere.', on_delete=django.db.models.deletion.RESTRICT, related_name='energy_quality_records', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Energy Quality Record',
                'verbose_name_plural': 'Energy Quality Records',
                'db_table': 'energy_quality_records',
                'ordering': ['-record_datetime', 'profile'],
                'unique_together': {('profile', 'record_datetime')},
            },
        ),
        migrations.CreateModel(
            name='EnergyTariffTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('min_kwh', models.DecimalField(decimal_places=2, help_text='Limite inferior da faixa de consumo em kWh (inclusive).', max_digits=10)),
                ('max_kwh', models.DecimalField(blank=True, decimal_places=2, help_text="Limite superior da faixa de consumo em kWh (exclusive). Null para faixa final 'acima de'.", max_digits=10, null=True)),
                ('price_per_kwh', models.DecimalField(decimal_places=5, help_text='Preço por kWh para esta faixa de consumo (R$/kWh).', max_digits=10)),
                ('order', models.IntegerField(help_text='Ordem da faixa de consumo para processamento.')),
                ('tariff', models.ForeignKey(help_text='Tarifa de energia à qual esta faixa de consumo pertence.', on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='pages.energytariff')),
            ],
            options={
                'verbose_name': 'Faixa de Tarifa de Energia',
                'verbose_name_plural': 'Faixas de Tarifas de Energia',
                'ordering': ['tariff', 'order'],
                'unique_together': {('tariff', 'order')},
            },
        ),
        migrations.CreateModel(
            name='KPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('kpi_name', models.CharField(choices=[('CONSUMO_TOTAL_MES', 'Consumo Total do Mês (kWh)'), ('CUSTO_TOTAL_MES', 'Custo Total do Mês (R$)'), ('DEMANDA_MAXIMA_MES', 'Demanda Máxima do Mês (kW)'), ('FATOR_POTENCIA_MEDIO', 'Fator de Potência Médio'), ('CONSUMO_POR_DISPOSITIVO', 'Consumo por Dispositivo (kWh)'), ('PREVISAO_VS_REAL', 'Desvio da Previsão vs Real (%)'), ('META_ATINGIDA', 'Meta de Consumo Atingida (%)'), ('CONSUMO_KWH_M2', 'Consumo (kWh/m²)'), ('CUSTO_R$_M2', 'Custo (R$/m²)'), ('DURACAO_INTERRUPCOES', 'Duração de Interrupções (horas)')], help_text='Nome/tipo do KPI.', max_length=255)),
                ('kpi_type', models.CharField(choices=[('MEDIDOR', 'Dados do Medidor'), ('FATURA', 'Dados da Fatura'), ('PREVISAO', 'Dados de Previsão'), ('QUALIDADE', 'Qualidade de Energia'), ('META', 'Meta de Consumo'), ('TENDENCIAS_CONSUMO', 'Tendências de Consumo'), ('PREVISAO_CONSUMO', 'Previsão de Consumo'), ('BENCHMARK_CONSUMO', 'Benchmark de Consumo'), ('MONITORAMENTO_ACURACIA', 'Monitoramento de Acurácia'), ('OTIMIZACAO', 'Otimização')], default='PREVISAO', help_text='Tipo de KPI (e.g., Benchmark de Consumo, Monitoramento de Acurácia).', max_length=50)),
                ('timeframe', models.CharField(choices=[('DIARIO', 'Diário'), ('SEMANAL', 'Semanal'), ('MENSAL', 'Mensal'), ('ANUAL', 'Anual')], help_text='Período de tempo para o KPI.', max_length=50)),
                ('target_value', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('current_value', models.DecimalField(blank=True, decimal_places=4, help_text='Valor atual do KPI.', max_digits=12, null=True)),
                ('unit', models.CharField(blank=True, choices=[('Kwh', 'Kwh'), ('%', 'Porcentagem'), ('R$', 'Moeda'), ('Count', 'Contagem'), ('Hours', 'Horas')], max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do KPI.')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o KPI está ativo para monitoramento.')),
                ('description', models.TextField(blank=True, null=True)),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='kpis', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'KPI',
                'verbose_name_plural': 'KPIs',
                'db_table': 'kpis',
                'ordering': ['profile__name', 'kpi_name'],
                'unique_together': {('profile', 'kpi_name', 'timeframe')},
            },
        ),
        migrations.CreateModel(
            name='ModelAccuracyScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=4, max_digits=5)),
                ('evaluation_date', models.DateTimeField(default=datetime.datetime.now, help_text='Data e hora em que o modelo foi avaliado.', verbose_name='Data da Avaliação')),
                ('mape', models.DecimalField(blank=True, decimal_places=2, help_text='Mean Absolute Percentage Error (Erro Percentual Absoluto Médio).', max_digits=5, null=True, verbose_name='MAPE (%)')),
                ('rmse', models.DecimalField(blank=True, decimal_places=4, help_text='Root Mean Squared Error (Raiz do Erro Quadrático Médio) em kWh.', max_digits=10, null=True, verbose_name='RMSE (kWh)')),
                ('start_date', models.DateField(help_text='Data de início do período para o qual a acurácia foi calculada.', verbose_name='Data de Início do Período Avaliado')),
                ('end_date', models.DateField(help_text='Data de fim do período para o qual a acurácia foi calculada.', verbose_name='Data de Fim do Período Avaliado')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='model_accuracy_scores', to='pages.energyprofiles')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accuracy_scores', to='pages.predictionmodels')),
            ],
            options={
                'verbose_name': 'Model Accuracy Score',
                'verbose_name_plural': 'Model Accuracy Scores',
                'db_table': 'model_accuracy_scores',
                'ordering': ['-evaluation_date', 'model', 'profile'],
                'unique_together': {('model', 'profile', 'start_date', 'end_date')},
            },
        ),
        migrations.CreateModel(
            name='EnergyReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reading_datetime', models.DateTimeField(help_text='Data e Horada leitura final do período de consumo.')),
                ('meter_number', models.CharField(blank=True, help_text='Número do medidor.', max_length=50, null=True)),
                ('reading_period', models.CharField(choices=[('HORARIA', 'Horária'), ('DIARIA', 'Diária'), ('MENSAL', 'Mensal')], default='DIARIA', max_length=10)),
                ('measurement_type', models.CharField(choices=[('SIMPLES', 'Consumo Simples (Total)'), ('PFP', 'Consumo (Ponta/Fora Ponta)'), ('DEMANDA', 'Demanda e Consumo (Grupo A)')], default='SIMPLES', max_length=10, verbose_name='Tipo de Medição')),
                ('total_kwh_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Consumo total de kWh no período da leitura.', max_digits=10, null=True)),
                ('peak_kwh_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Consumo de kWh na ponta no período.', max_digits=10, null=True)),
                ('intermediate_kwh_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Consumo de kWh no período intermediário (Tarifa Branca) no período.', max_digits=10, null=True)),
                ('off_peak_kwh_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Consumo de kWh fora de ponta no período.', max_digits=10, null=True)),
                ('peak_demand_reading_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda medida na ponta (kW).', max_digits=10, null=True)),
                ('off_peak_demand_reading_kw', models.DecimalField(blank=True, decimal_places=2, help_text='Demanda medida fora de ponta (kW).', max_digits=10, null=True)),
                ('reactive_kvarh_consumption', models.DecimalField(blank=True, decimal_places=2, help_text='Consumo de energia reativa (kVARh).', max_digits=10, null=True)),
                ('billing_record', models.ForeignKey(blank=True, help_text='Fatura à qual esta leitura pertence.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='pages.billingrecord')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='energy_readings', to='pages.energyprofiles')),
                ('profile_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='energy_readings', to='pages.profiledevices')),
            ],
            options={
                'verbose_name': 'Energy Reading',
                'verbose_name_plural': 'Energy Readings',
                'db_table': 'energy_readings',
                'ordering': ['-reading_datetime'],
                'unique_together': {('profile', 'reading_datetime', 'reading_period', 'profile_device')},
            },
        ),
        migrations.CreateModel(
            name='DeviceUsagePattern',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('hour_of_day', models.IntegerField(help_text='Hora do dia (0-23).')),
                ('usage_percentage', models.DecimalField(decimal_places=2, help_text='Porcentagem de uso do dispositivo naquela hora (0.00-100.00).', max_digits=5)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Segunda-feira'), (1, 'Terça-feira'), (2, 'Quarta-feira'), (3, 'Quinta-feira'), (4, 'Sexta-feira'), (5, 'Sábado'), (6, 'Domingo')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('kwh_consumption', models.DecimalField(decimal_places=4, help_text='Consumo de energia do dispositivo durante o período de uso.', max_digits=10, verbose_name='Consumo (kWh)')),
                ('intensity_factor', models.DecimalField(decimal_places=2, default=1.0, max_digits=4)),
                ('description', models.TextField(blank=True, null=True)),
                ('profile_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_patterns', to='pages.profiledevices')),
            ],
            options={
                'verbose_name': 'Device Usage Pattern',
                'verbose_name_plural': 'Device Usage Patterns',
                'db_table': 'device_usage_patterns',
                'ordering': ['profile_device', 'day_of_week', 'start_time'],
                'unique_together': {('profile_device', 'day_of_week', 'start_time', 'end_time')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalPredictionComparison',
            fields=[
                ('prediction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='comparison', serialize=False, to='pages.consumptionpredictions')),
                ('actual_kwh', models.DecimalField(decimal_places=4, max_digits=10)),
                ('comparison_date', models.DateField()),
                ('deviation', models.DecimalField(decimal_places=4, help_text='Diferença entre previsto e real.', max_digits=10)),
                ('error_kwh', models.DecimalField(decimal_places=4, max_digits=10)),
                ('percentage_error', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('deviation_percentage', models.DecimalField(decimal_places=2, help_text='Desvio em porcentagem.', max_digits=5)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='prediction_comparisons', to='pages.energyprofiles')),
            ],
            options={
                'verbose_name': 'Historical Prediction Comparison',
                'verbose_name_plural': 'Historical Prediction Comparisons',
                'db_table': 'historical_prediction_comparisons',
                'ordering': ['-comparison_date', 'profile__name'],
                'unique_together': {('profile', 'comparison_date')},
            },
        ),
    ]
